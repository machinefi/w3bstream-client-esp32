/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_USER_DATA_PB_H_INCLUDED
#define PB_USER_DATA_PB_H_INCLUDED
#include "ProtoBuf/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _user_data {
    int32_t sensor_1;
    double sensor_2;
    bool sensor_3;
} user_data;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define user_data_init_default                   {0, 0, 0}
#define user_data_init_zero                      {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define user_data_sensor_1_tag                   1
#define user_data_sensor_2_tag                   2
#define user_data_sensor_3_tag                   3

/* Struct field encoding specification for nanopb */
#define user_data_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    sensor_1,          1) \
X(a, STATIC,   SINGULAR, DOUBLE,   sensor_2,          2) \
X(a, STATIC,   SINGULAR, BOOL,     sensor_3,          3)
#define user_data_CALLBACK NULL
#define user_data_DEFAULT NULL

extern const pb_msgdesc_t user_data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define user_data_fields &user_data_msg

/* Maximum encoded size of messages (where known) */
#define user_data_size                           22

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
